{"remainingRequest":"D:\\test1\\cloud-master\\cloud-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\test1\\cloud-master\\cloud-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\test1\\cloud-master\\cloud-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\test1\\cloud-master\\cloud-master\\src\\views\\Home\\DjRadio\\Recommend\\index.vue?vue&type=template&id=ecf407e2&scoped=true&","dependencies":[{"path":"D:\\test1\\cloud-master\\cloud-master\\src\\views\\Home\\DjRadio\\Recommend\\index.vue","mtime":1654515726000},{"path":"D:\\test1\\cloud-master\\cloud-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\test1\\cloud-master\\cloud-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\test1\\cloud-master\\cloud-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\test1\\cloud-master\\cloud-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}